"""
Django settings for mall project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-uzw3=3!+i2$er9+2n12eo@_0-=n39a7wf1n91@6+!1li0!37ax'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    '0.0.0.0',
]

# CORS配置
CORS_ALLOW_ALL_ORIGINS = True  # 开发环境允许所有来源
CORS_ALLOW_CREDENTIALS = True  # 允许发送cookie

# 明确指定允许的来源
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3001",
    "http://127.0.0.1:3001",
]

# 或者指定允许的来源
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:8080",
#     "http://localhost:8081",
#     "http://localhost:8082",
#     "http://localhost:8083",
#     "http://localhost:8084",
#     "http://localhost:8085",
#     "http://localhost:8086",
#     "http://localhost:8087",
#     "http://localhost:8088",
#     "http://localhost:8089",
#     "http://127.0.0.1:8080",
#     "http://127.0.0.1:8081",
#     "http://127.0.0.1:8082",
#     "http://127.0.0.1:8083",
#     "http://127.0.0.1:8084",
#     "http://127.0.0.1:8085",
#     "http://127.0.0.1:8086",
#     "http://127.0.0.1:8087",
#     "http://127.0.0.1:8088",
#     "http://127.0.0.1:8089",
# ]

# CSRF信任的来源域名
CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1:4400',
    'http://localhost:4400',
    'https://7a77-60-48-150-169.ngrok-free.app',
    'http://7a77-60-48-150-169.ngrok-free.app',
    'http://localhost:3001',  # Nuxt前端应用程序
    'http://127.0.0.1:3001',  # Nuxt前端应用程序
]


# Application definition

INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'goods',
    'wishlist',
    'wishlist_new',
    'users',
    'tg_bot',
    'channels',
    'payment',
    'order',
    # 'cart',  # 暂时禁用购物车功能，使用心愿单替代
    'content',  # 内容管理应用
    'site_templates',  # Alokai模板应用
    'sites',  # 多站点管理应用
    
    # API相关应用
    'api',
    'rest_framework',
    'rest_framework_simplejwt',
    'drf_yasg',
    'corsheaders',  # 添加CORS支持
    'django_filters',  # 添加django-filter支持
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # 添加CORS中间件，必须在CommonMiddleware之前
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'mall.middleware.site_middleware.SiteMiddleware',  # 添加站点中间件
    'api.swagger_fix.SwaggerFixMiddleware',  # 添加Swagger文档修复中间件
]

ROOT_URLCONF = 'mall.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'site_templates/templates/alokai'),
            os.path.join(BASE_DIR, 'site_templates/templates/site_templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'site_templates.context_processors.site_config',
            ],
        },
    },
]

WSGI_APPLICATION = 'mall.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# PostgreSQL配置
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'cartit_mall',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# SQLite配置
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 6,
        }
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# 静态文件配置
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'frontend'),
]

# 媒体文件配置
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Site URL (用于生成完整的URL，如Telegram通知中的链接)
SITE_URL = 'http://127.0.0.1:8080'

# Telegram Bot配置
# TELEGRAM_WEBHOOK_BASE_URL = 'https://example.com'

# Celery配置
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Simpleui配置 - 自定义菜单
SIMPLEUI_CONFIG = {
    'system_keep': False,  # 不保留系统菜单
    'menus': [
        {
            'name': '商品管理',
            'icon': 'fas fa-shopping-bag',
            'models': [
                {
                    'name': '商品',
                    'url': 'goods/goods/',
                    'icon': 'fa fa-shopping-cart'
                },
                {
                    'name': '商品分类',
                    'url': 'goods/goodscategory/',
                    'icon': 'fa fa-tags'
                }
            ]
        },
        {
            'name': '心愿单',
            'icon': 'fas fa-heart',
            'models': [
                {
                    'name': '心愿单',
                    'url': 'wishlist_new/wishlist/',
                    'icon': 'fa fa-list'
                },
                {
                    'name': '心愿单物品',
                    'url': 'wishlist_new/wishlistitem/',
                    'icon': 'fa fa-gift'
                }
            ]
        },
        {
            'name': 'Telegram机器人',
            'icon': 'fab fa-telegram',
            'models': [
                {
                    'name': 'Telegram配置',
                    'url': 'tg_bot/telegrambotsettings/',
                    'icon': 'fa fa-cog'
                },
                {
                    'name': '消息记录',
                    'url': 'tg_bot/telegramnotification/',
                    'icon': 'fa fa-comment'
                }
            ]
        },
        {
            'name': '订单管理',
            'icon': 'fas fa-file-invoice',
            'models': [
                {
                    'name': '订单',
                    'url': 'order/order/',
                    'icon': 'fa fa-clipboard-list'
                },
                {
                    'name': '退款详情',
                    'url': 'order/refunddetail/',
                    'icon': 'fa fa-money-bill-wave'
                },
                {
                    'name': '订单日志',
                    'url': 'order/orderlog/',
                    'icon': 'fa fa-history'
                }
            ]
        },
        {
            'name': '支付管理',
            'icon': 'fas fa-credit-card',
            'models': [
                {
                    'name': '支付记录',
                    'url': 'payment/payment/',
                    'icon': 'fa fa-list-alt'
                },
                {
                    'name': '支付方式',
                    'url': 'payment/paymentmethod/',
                    'icon': 'fa fa-money-bill'
                },
                {
                    'name': '支付回调日志',
                    'url': 'payment/paymentwebhooklog/',
                    'icon': 'fa fa-history'
                }
            ]
        },
        {
            'name': '用户管理',
            'icon': 'fas fa-users',
            'models': [
                {
                    'name': '用户',
                    'url': 'auth/user/',
                    'icon': 'fa fa-user'
                },
                {
                    'name': '收货地址',
                    'url': 'users/shippingaddress/',
                    'icon': 'fa fa-address-card'
                }
            ]
        },
        {
            'name': '站点管理',
            'icon': 'fas fa-globe',
            'models': [
                {
                    'name': '站点列表',
                    'url': 'sites/site/',
                    'icon': 'fa fa-sitemap'
                },
                {
                    'name': '幻灯片',
                    'url': 'sites/siteslide/',
                    'icon': 'fa fa-images'
                }
            ]
        }
    ]
}

# 站点映射配置
SITE_MAPPING = {
    'localhost:8000': 'default',  # 本地开发环境
    '127.0.0.1:8000': 'default',  # 本地开发环境
    'localhost:8000/alokai': 'alokai',  # Alokai站点
    '127.0.0.1:8000/alokai': 'alokai',  # Alokai站点
}

SITE_NAMES = {
    'default': '默认商城',
    'alokai': 'Alokai商城',
}

# Channels配置
ASGI_APPLICATION = 'mall.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
        # 生产环境使用Redis作为后端
        # 'BACKEND': 'channels_redis.core.RedisChannelLayer',
        # 'CONFIG': {
        #     "hosts": [('127.0.0.1', 6379)],
        # },
    },
}

# 用户登录相关设置
LOGIN_URL = '/users/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# API配置
API_BASE_URL = 'http://127.0.0.1:8000/api/v1'
DEFAULT_API_TOKEN = 'your_api_token_here'  # 请替换为实际的API令牌

# REST Framework配置
REST_FRAMEWORK = {
    # 认证方式
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'api.swagger_fix.SwaggerFixAuthentication',  # Swagger文档修复认证类
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    # 权限设置
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    # 分页设置
    'DEFAULT_PAGINATION_CLASS': 'api.pagination.StandardResultsSetPagination',
    'PAGE_SIZE': 20,
    # 渲染器
    'DEFAULT_RENDERER_CLASSES': (
        'api.renderers.APIJSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    # 异常处理
    'EXCEPTION_HANDLER': 'api.exceptions.custom_exception_handler',
}

# JWT认证配置
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

# API统一响应格式
API_RESPONSE_FORMAT = {
    'CODE_FIELD': 'code',
    'MESSAGE_FIELD': 'message',
    'DATA_FIELD': 'data',
    'SUCCESS_CODE': 0,
    'ERROR_CODE': 1,
    'SUCCESS_MESSAGE': 'success',
}

# 本地API配置 (之前的Alokai平台配置)
LOCAL_API_CONFIG = {
    'API_URL': 'http://localhost:8000/api/v1',
    'PLATFORM_URL': 'http://localhost:8000',
    'TOKEN': 'local-api-token',
    'CDN_URL': '/static'
}
